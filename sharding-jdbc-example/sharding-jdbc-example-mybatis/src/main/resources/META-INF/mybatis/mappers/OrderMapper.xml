<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dangdang.ddframe.rdb.sharding.example.jdbc.repository.OrderRepository">
    <resultMap id="baseResultMap" type="com.dangdang.ddframe.rdb.sharding.example.jdbc.entity.Order">
        <result column="order_id" property="orderId" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="CLOB"/>
    </resultMap>
    
    <sql id="baseColumnList">
        order_id,
        user_id,
        status
    </sql>
    
    <insert id="insert" keyProperty="orderId" useGeneratedKeys="true" >
        INSERT INTO `t_order`(
        `user_id`,`status`
        )
        VALUES (
        #{userId,jdbcType=INTEGER},
        #{status,jdbcType=CLOB}
        );
    </insert>

    <insert id="insertWithId"  >
        INSERT INTO `t_order`(
        `order_id`,`user_id`,`status`
        )
        VALUES (
        #{orderId,jdbcType=BIGINT},
        #{userId,jdbcType=INTEGER},
        #{status,jdbcType=CLOB}
        );
    </insert>

    <insert id="insertBatch" parameterType="list">
        INSERT INTO `t_order`(
        <include refid="baseColumnList"/>
        )
        VALUES
        <foreach collection="list" item="item" index="index" open="("
                 close=");" separator="),(">
            #{item.orderId,jdbcType=INTEGER},
            #{item.userId,jdbcType=INTEGER},
            #{item.status,jdbcType=VARCHAR}
        </foreach>
    </insert>
    
    <update id="update">
        UPDATE `t_order`
        SET `status` = 'UPDATED'
        WHERE `user_id` in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    
    
    <delete id="deleteAll">
        DELETE FROM `t_order`
    </delete>
    
    
    <select id="selectAll" resultMap="baseResultMap">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order` order by order_id
    </select>


    <select id="selectEqueal" resultMap="baseResultMap" parameterType="java.lang.Integer">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order` WHERE user_id= #{userId,jdbcType=INTEGER} order by order_id
    </select>

    <select id="selectGreater" resultMap="baseResultMap" parameterType="java.lang.Integer">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order` WHERE user_id> #{userId,jdbcType=INTEGER} order by order_id
    </select>

    <select id="selectIn" resultMap="baseResultMap">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order`
        WHERE `order_id` in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by order_id
    </select>

    <select id="selectBeteen" resultMap="baseResultMap" parameterType="java.util.Map">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order`
        WHERE `order_id` BETWEEN #{minOrderId,jdbcType=BIGINT} and #{maxOrderId,jdbcType=BIGINT}
        order by order_id
    </select>


    <select id="selectLimit" resultMap="baseResultMap" parameterType="java.util.Map">
        SELECT
        <include refid="baseColumnList"/>
        FROM `t_order`
        order by order_id asc
        <if test="index != null and pageSizes != null">
            limit #{index,jdbcType=INTEGER},#{pageSizes,jdbcType=INTEGER}
        </if>

    </select>
    <resultMap id="FunctionMap" type="com.dangdang.ddframe.rdb.sharding.example.jdbc.entity.Function">
        <result column="_avg" property="avg" jdbcType="BIGINT"/>
        <result column="_count" property="count" jdbcType="INTEGER"/>
        <result column="_distinctCount" property="distinctCount" jdbcType="INTEGER"/>
        <result column="_sum" property="sum" jdbcType="INTEGER"/>
    </resultMap>
    <select id="function" resultMap="FunctionMap">
        SELECT avg(order_id) _avg,count(user_id) _count,count(DISTINCT  user_id) _distinctCount,sum(user_id) _sum from  `t_order`
    </select>

    <resultMap id="groupByMap" type="com.dangdang.ddframe.rdb.sharding.example.jdbc.entity.GroupBy">
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="countUser" property="countUser" jdbcType="INTEGER"/>
    </resultMap>

    <select id="groupBy" resultMap="groupByMap">
      SELECT user_id,count(1) countUser from t_order GROUP  BY  user_id
    </select>
</mapper>
